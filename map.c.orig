#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <unistd.h>

#define KABE '#'
#define START 'S'
#define GOAL 'G'
#define PLAYER '@'
#define TREASURE '$'
#define BOMB '*'
#define GRASS '.'
#define WARP '?'
#define HIGASHI 1
#define MINAMI 2
#define NISHI 3
#define KITA 0

char map[100][100];

void make_map(int size)
{
    int a,b,c,d,e,f,g,h,i,j,k,l,m;
    srand((unsigned)time(NULL));

    for(i = 0; i < size; i++)
      {
          for(j = 0; j < size; j++)
            {
                if(i == 1 && j == 0)
                  {
                      map[i][j] = START;
                  }
                else if(i == size-2 && j == size-1)
                  {
                      map[i][j] = GOAL;
                  }
                else if(i == 0 || i == size-1)
                  {
                      map[i][j] = KABE;
                  }
                else if(j == 0 || j == size-1)
                  {
                      map[i][j] = KABE;
                  }
                else
                  {
                      map[i][j] = '.';
                  }
            }
      }

    for(k = 0; k < 3; k++)
      {
          a = (rand()/(double)RAND_MAX*(size-3)+1);
          b = (rand()/(double)RAND_MAX*(size-3)+1);
          if(a == 1 || b == 1)
            {
                a = (rand()/(double)RAND_MAX*(size-3)+1);
                b = (rand()/(double)RAND_MAX*(size-3)+1);
            }

          map[a][b] = TREASURE;
      }

    for(l = 0; l < size-5; l++)
      {
          c = (rand()/(double)RAND_MAX*(size-3)+1);
          d = (rand()/(double)RAND_MAX*(size-3)+1);
          e = (rand()/(double)RAND_MAX*(size-3)+1);
          f = (rand()/(double)RAND_MAX*(size-3)+1);
          while(map[c][d] == TREASURE)
            {
                c = (rand()/(double)RAND_MAX*(size-3)+1);
            }
          while(c == 1 || d == 1)
            {
                c = (rand()/(double)RAND_MAX*(size-3)+1);
                d = (rand()/(double)RAND_MAX*(size-3)+1);
                if(map[c][d] == TREASURE)
                  {
                      c = (rand()/(double)RAND_MAX*(size-3)+1);
                  }
            }
          while(c == size-2 || d == size-1)
            {
                c = (rand()/(double)RAND_MAX*(size-3)+1);
                d = (rand()/(double)RAND_MAX*(size-3)+1);
                while(map[c][d] == TREASURE)
                  {
                      c = (rand()/(double)RAND_MAX*(size-3)+1);
                  }
            }
          map[c][d] = BOMB;

          while(map[e][f] == TREASURE || map[e][f] == BOMB)
            {
                e = (rand()/(double)RAND_MAX*(size-3)+1);
                f = (rand()/(double)RAND_MAX*(size-3)+1);
            }
          while(e == 1 || f == 1)
            {
                e = (rand()/(double)RAND_MAX*(size-3)+1);
                f = (rand()/(double)RAND_MAX*(size-3)+1);
                while(map[e][f] == TREASURE || map[e][f] == BOMB)
                  {
                      e = (rand()/(double)RAND_MAX*(size-3)+1);
                      f = (rand()/(double)RAND_MAX*(size-3)+1);
                  }
            }
          while(e == size-2 || f == size-2)
            {
                e = (rand()/(double)RAND_MAX*(size-3)+1);
                f = (rand()/(double)RAND_MAX*(size-3)+1);
                while(map[e][f] == TREASURE || map[e][f] == BOMB)
                  {
                      e = (rand()/(double)RAND_MAX*(size-3)+1);
                      f = (rand()/(double)RAND_MAX*(size-3)+1);
                  }
            }
          map[e][f] = KABE;
      }

    for(m = 0; m < 2; m++)
      {
          g = (rand()/(double)RAND_MAX*(size-3)+1);
          h = (rand()/(double)RAND_MAX*(size-3)+1);
          while(g == 1 || h == 1)
            {
                g = (rand()/(double)RAND_MAX*(size-3)+1);
                h = (rand()/(double)RAND_MAX*(size-3)+1);
                while(g == size-2 || h == size-2)
                  {
                      g = (rand()/(double)RAND_MAX*(size-3)+1);
                      h = (rand()/(double)RAND_MAX*(size-3)+1);
                      while(map[g][h] == TREASURE || map[g][h] == BOMB || map[g][h] == KABE || map[g][h] == WARP)
                        {
                            g = (rand()/(double)RAND_MAX*(size-3)+1);
                            h = (rand()/(double)RAND_MAX*(size-3)+1);
                        }
                  }
            }
          map[g][h] = WARP;
      }

    for(i = 0; i < size; i++)
      {
          for(j = 0; j < size; j++)
            {
                if(i == 1 && j == 0)
                  {
                      printf("\x1b[43m");
                      printf("%c",map[i][j]);
                  }
                else if(i == size-2 && j == size-1)
                  {
                      printf("\x1b[43m");
                      printf("%c",map[i][j]);
                  }
                else if(map[i][j] == TREASURE)
                  {
                      printf("\x1b[33m");
                      printf("\x1b[46m");
                      printf("%c", map[i][j]);
                  }
                else if(map[i][j] == BOMB)
                  {
                      printf("\x1b[31m");
                      printf("\x1b[46m");
                      printf("%c", map[i][j]);
                  }
                else if(map[i][j] == KABE)
                  {
                      printf("\x1b[30m");
                      printf("\x1b[47m");
                      printf("%c", map[i][j]);
                  }
                else if(map[i][j] == WARP)
                  {
                      printf("\x1b[35m");
                      printf("\x1b[46m");
                      printf("%c", map[i][j]);
                  }
                else
                  {
                      printf("\x1b[46m");
                      printf("\x1b[35m");
                      printf("%c", map[i][j]);
                  }

                printf("\x1b[49m");
                printf("\x1b[39m");
            }
          printf("\n");
      }
    printf("\n");
}

void map_display(int size,int treasure_count,int length,int command_count,char command[])
{
    int l,m,n;
    for(l = 0; l < size+2; l++)
      {
          for(m = 0; m < size; m++)
            {
                if(l == 1 && m == 0)
                  {
                      printf("\x1b[43m");
                      printf("%c",map[l][m]);
                      printf("\x1b[49m");
                  }
                else if(map[l][m] == PLAYER)
                  {
                      printf("\x1b[39m");
                      printf("%c",map[l][m]);
                  }
                else if(l == size-2 && m == size-1)
                  {
                      printf("\x1b[43m");
                      printf("%c",map[l][m]);
                  }
                else if(map[l][m] == ' ')
                  {
                      printf("\x1b[49m");
                      printf("%c",map[l][m]);
                  }
                else if(map[l][m] == TREASURE)
                  {
                      printf("\x1b[33m");
                      printf("\x1b[46m");
                      printf("%c", map[l][m]);
                  }
                else if(map[l][m] == BOMB)
                  {
                      printf("\x1b[31m");
                      printf("\x1b[46m");
                      printf("%c", map[l][m]);
                  }
                else if(map[l][m] == KABE)
                  {
                      printf("\x1b[30m");
                      printf("\x1b[47m");
                      printf("%c", map[l][m]);
                  }
                else if(map[l][m] == WARP)
                  {
                      printf("\x1b[35m");
                      printf("\x1b[46m");
                      printf("%c", map[l][m]);
                  }
                else if(l == size && m == 0)
                  {
                      printf("集めたお宝：%d個", treasure_count);
                  }
                else if(l == size)
                  {
                  }
                else if(l == size+1 && m == 0)
                  {
                      for(n = 0; n < length; n++)
                        {
                            if(n == command_count)
                              {
                                  printf("\x1b[41m");
                                  printf("%c", command[n]);
                                  printf("\x1b[39m");
                                  printf("\x1b[49m");
                              }
                            else
                              {
                                  printf("%c", command[n]);
                              }
                        }
                      command_count++;
                  }
                else if(l == size+1)
                  {
                  }
                else
                  {
                      printf("\x1b[46m");
                      printf("\x1b[35m");
                      printf("%c", map[l][m]);
                  }

                printf("\x1b[49m");
                printf("\x1b[39m");
            }
          printf("\n");
      }
    printf("\n\n");
    usleep(500000);
    system("clear");
}

int player_move(char command[],int length,int size)
{
    int r_count = 1,vector = 1,i = 0,j = 1,k = 0,treasure_count = 0,a,b,command_count = 0;
    for(i = 0; i < length; i++)
      {
          map[j][k] = ' ';
          if(command[i] == 'R')
            {
                r_count++;
                vector = r_count%4;
            }
          else if(command[i] == 'L')
            {
                r_count += 3;
                vector = r_count%4;
            }
          else if(command[i] == 'F')
            {
                switch(vector)
                  {
                    case HIGASHI:
                        k++;
                        if(map[j][k] == KABE)
                          {
                              k--;
                          }

                        break;
                    case MINAMI:
                        j++;
                        if(map[j][k] == KABE)
                          {
                              j--;
                          }

                        break;
                    case NISHI:
                        k--;
                        if(map[j][k] == KABE)
                          {
                              k++;
                          }

                        break;
                    case KITA:
                        j--;
                        if(map[j][k] == KABE)
                          {
                              j++;
                          }

                        break;
                  }
            }
          else if(command[i] == 'B')
            {
                switch(vector)
                  {
                    case HIGASHI:
                        k--;
                        if(map[j][k] == KABE)
                          {
                              k++;
                          }

                        break;
                    case MINAMI:
                        j--;
                        if(map[j][k] == KABE)
                          {
                              j++;
                          }

                        break;
                    case NISHI:
                        k++;
                        if(map[j][k] == KABE)
                          {
                              k--;
                          }

                        break;
                    case KITA:
                        j++;
                        if(map[j][k] == KABE)
                          {
                              j--;
                          }

                        break;
                  }
            }

          if(map[j][k] == BOMB)
            {
                system("clear");
                printf("~GAMEOVER~\n爆弾を踏みました\n");
                return 0;
            }

          if(map[j][k] == TREASURE)
            {
                treasure_count++;
            }

          if(map[j][k] == WARP)
            {
                for(a = 1; a < size-1; a++)
                  {
                      for(b = 1; b < size-1; b++)
                        {
                            if(map[a][b] == WARP)
                              {
                                  if(a != j && b != k)
                                    {
                                        j = a;
                                        k = b;
                                        break;
                                    }
                                  else
                                    {
                                        continue;
                                    }
                              }
                        }
                  }
            }

          if(map[j][k] == GOAL)
            {
                system("clear");
                printf("ゴール！\n");
                if(treasure_count == 3)
                  {
                      printf("お宝をすべて集めました！天才！\n");
                  }
                else
                  {
                      printf("お宝%d個...\n", treasure_count);
                  }

                return 1;
            }

          map[j][k] = PLAYER;
          map[1][0] = START;
          system("clear");
          map_display(size,treasure_count,length,command_count,command);
          command_count++;
      }
    printf("~GAMEOVER~\nゴールできませんでした...\n");
    return 0;
}


int main(int argc, char** argv)
{
    #include <stdio.h>
    #include <string.h>
    #include <unistd.h>
    int length,i,j,a,b,level;
    char repeat[10],title[17] = "Treasure Get Game",input[15];
    system("clear");
    for(j = 0; j < 17; j++)
      {
          printf("%c", title[j]);
          fflush(stdout);
          usleep(50000);
      }
    printf("\n");
    sleep(2);
    system("clear");
    printf("LEVEL SERECT(1~5):");
    fgets(input,10,stdin);

    level = atoi(input);

    for(i = level; i < 11; i++)
      {
          char command[100];
          system("clear");
          printf("\x1b[36m");
          printf("~LEVEL%d~\n", i);
          printf("\x1b[49m");
          printf("\x1b[39m");
          sleep(2);
          system("clear");
          make_map(i*10);
          fgets(command,100,stdin);
          for(length = 0; command[length] != '\0'; length++)
            {

            }
          a = player_move(command,length,i*10);
          if(a == 0)
            {
                printf("やりなおしますか？(はい＝1,いいえ=0):\n");
                fgets(repeat,10,stdin);
                b = atoi(repeat);
                if(b == 1)
                  {
                      i--;
                      continue;
                  }
                else
                  {
                      break;
                  }
            }

          sleep(2);
      }
    return 0;
}
